PLANT BUILDER — INCREMENTAL REORG & CLEANUP PLAN
Last updated: 2025-08-17 12:28 UTC

This document tracks small, verifiable steps to reorganize and clean up the codebase.
Each stage is designed to be a small PR so you can confirm behavior before merging.

GROUND RULES
- Keep PRs small and behavior‑preserving unless noted.
- After each PR: run the smoke script and existing tests; record results.
- Prefer logging to prints; prefer warnings/errors over silent `pass`.
- Add one new focused test per PR where feasible.

----------------------------------------------------------------

STAGE 0 — BASELINE & SAFETY NETS (PR 0)
Goal: Freeze current behavior and detect regressions early.

[ X] Tag baseline commit: baseline/pre-refactor.
[ ] Add a headless smoke script that:
    - Loads a sample YAML/workflow.
    - Builds a small segment (2–3 wafers).
    - Saves/prints a compact summary (wafer count, group names, base/top LCS).
[ ] Capture baseline artifacts (summary JSON or text) for comparison.

Verify:
[ ] Smoke script runs end-to-end and the summary matches the baseline.

----------------------------------------------------------------

STAGE 1 — FINISH LOGGING PASS IN src/ (PR 1–2)
Goal: Remove remaining print() from src/ (tests can keep prints).

[ ] Convert remaining print() -> logger.<level>; map “verbose”->debug, “warning”->warning.
[ ] Ensure module-level logger = get_logger(__name__) exists everywhere.- operation: "build_segment"
    segment_type: "curve_follower"
    name: "Curve Four"
    description: "Turn toward center 135 degrees"

    curve_spec:
      type: "circle"
      parameters:
        radius: 8.0
        points: 35
      transformations:
        - operation: "rotate"
          axis: "z"
          angle: 0
      segment:
        start_fraction: 0.0
        end_fraction: 0.48

    wafer_settings:
      cylinder_diameter: 2.25
      min_height: 0.5          # Much smaller
      max_chord: 0.2            # Much tighter

    segment_settings:
      show_lcs: false
      build_segment: true
      rotate_segment: 0.0
      add_curve_vertices: true

Verify:
[ ] Smoke output unchanged in behavior; logs show same high-level milestones.

----------------------------------------------------------------

STAGE 2 — GROUPING INVARIANTS (PR 3)
Goal: Keep model tree consistent (wafers live under the segment’s wafers subgroup).

[ ] Add helpers in core/core_utils.py:
    def ensure_group(doc, name, parent=None): ...
    def add_to_group(group, obj): ...
[ ] Use these helpers only in flex_segment.add_wafer first.
[ ] Add a unit test asserting:
    - Segment group exists.
    - wafers subgroup exists.
    - Created wafer object is in wafers group.

Verify:
[ ] Smoke unchanged; unit test passes.

----------------------------------------------------------------

STAGE 3 — ISOLATE PLACEMENT STRATEGIES (PR 4)
Goal: Make “LCS vs legacy placement” explicit and traceable.

[ ] Extract:
    - place_by_lcs(lcs1, lcs2, …)
    - place_legacy(lcs1, lcs2, rotation, …)
[ ] add_wafer selects strategy, logs at info which path ran.

Verify:
[ ] Smoke unchanged; logs show which placement strategy was used.

----------------------------------------------------------------

STAGE 4 — EXTRACT FUSION LOGIC (PR 5)
Goal: Robust, testable wafer fusion.

[ ] Extract helper: fuse_sequential(result_shape, next_shape) -> new_shape | None.
[ ] In fuse_wafers(): validate, fix() if needed, call helper; log and SKIP when None.
[ ] Add a small unit test fusing two simple shapes; assert valid result.

Verify:
[ ] Smoke unchanged; unit test passes.

----------------------------------------------------------------

STAGE 5 — DATACLASSES FOR PARAMETERS (PR 6–7)
Goal: Reduce long signatures; make params loggable/inspectable.

[ ] Introduce:
    @dataclass
    class WaferParams:
        wafer_type: str  # later -> Enum
        lift: float
        rotation: float
        cylinder_diameter: float
        outside_height: float

[ ] Update only internal Wafer.set_parameters to accept WaferParams; keep kwargs path for back-compat.
[ ] Log params with logger.debug(asdict(params)).

Verify:
[ ] Smoke unchanged; no call sites break; logs include structured params.

----------------------------------------------------------------

STAGE 6 — WaferType ENUM (PR 8)
Goal: Prevent typos in wafer types.

[ ] Add Enum (e.g., WaferType.CE, EE, EC, CC).
[ ] Accept both strings and Enum at boundaries; convert early inside code.
[ ] Do NOT change YAML yet—translate during load or right after parsing.

Verify:
[ ] Smoke unchanged; a unit test confirms string->Enum conversion.

----------------------------------------------------------------

STAGE 7 — NARROW EXCEPTIONS & REMOVE SILENT pass (PR 9–10)
Goal: Clearer failure modes without breaking runs.

[ ] Replace a couple of except Exception: with specific exceptions (per PR).
[ ] Where catch-all is required, log warning with context (segment name, wafer index), not pass.

Verify:
[ ] Smoke unchanged; failures show actionable logs.

----------------------------------------------------------------

STAGE 8 — CONFIG BOUNDARY TIDY (PR 11)
Goal: One place owns YAML parsing/validation.

[ ] Add core/config.py that loads YAML, validates required keys, and returns typed dicts/params.
[ ] driver.py calls core.config.load_config() instead of touching YAML directly.

Verify:
[ ] Smoke unchanged; missing keys yield clear error logs.

----------------------------------------------------------------

STAGE 9 — FREECAD DOCUMENT ADAPTER (PR 12)
Goal: Decouple FreeCAD document API for testing.

[ ] Add core/fc_doc.py with tiny wrapper (addObject, addObjects, Placement, close).
[ ] Phase 1: Inject/use wrapper only in flex_segment.
[ ] Test with a minimal fake doc in fixtures.

Verify:
[ ] Smoke unchanged; new unit test passes using the fake.

----------------------------------------------------------------

STAGE 10 — PUBLIC API SEAM (PR 13)
Goal: Stable entry to build a segment.

[ ] Add src/api.py:
    def build_segment(config_path: str) -> BuildSummary: ...
[ ] Make driver.py call api.build_segment().

Verify:
[ ] Smoke uses api; outputs unchanged.

----------------------------------------------------------------

STAGE 11 — LINT & FORMAT (PR 14)
Goal: Clean diffs without altering geometry logic.

[ ] Add ruff + black configs.
[ ] Run on core/ and tests/ first; defer heavy geometry files to avoid noise.
[ ] Fix trivial warnings only (imports, whitespace, dead code).

Verify:
[ ] CI green; minimal churn in geometry modules.

----------------------------------------------------------------

STAGE 12 — TYPE HINTS (SELECTIVE) (PR 15)
Goal: Catch bugs early, incrementally.

[ ] Annotate core/ and api.py; add mypy for these only.
[ ] Use a gradual mypy config to ignore other modules for now.

Verify:
[ ] mypy clean on the annotated subset.

----------------------------------------------------------------

NICE-TO-HAVES (BACKLOG)
[ ] Structured logging fields (segment_name, wafer_index, workflow_name) via extra={...}.
[ ] Snapshot summaries (JSON): wafer count, bounds, LCS placements for A/B comparison.
[ ] Micro-benchmarks: time sequential fusion on a 5–10 wafer case.
[ ] Replace ad-hoc “verbose” with a custom log level if useful (VERBOSE=15).

----------------------------------------------------------------

STATUS / NOTES
Use this section to jot down findings, flaky tests, or follow-ups as you progress.

- Baseline run notes: ...
- Known flaky areas: ...
- Next PR target: ...

KNOWN ISSUES:
[ ] Meta setting Show LCS: False is being ignmored
[ ] Vertices are not in their group in model tree
[ ] debug flag not consistent across project
[ ] curve_follower:calculate_optimal_curve_points  is not used.  There is no supporting method for other than helix.
[ ] LCS group in model tree contains LCSs that can be deleted (purple marker) indicates that it is unattached.
